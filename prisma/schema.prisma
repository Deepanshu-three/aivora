// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String    @id @default(cuid())
  name        String
  email       String    @unique
  password    String?
  phoneNumber String?
  address     String?
  city        String?
  state       String?
  postalCode  String?
  country     String?
  createdAt   DateTime  @default(now())

  orders      Order[]
  reviews     Review[]
  cart        Cart?
  wishlist    Wishlist?
  shippings   Shipping[]
}

model Category {
  id             String        @id @default(cuid())
  name           String
  description    String?
  createdAt      DateTime      @default(now())

  products       Product[]
  subCategories  SubCategory[] // NEW
}

model SubCategory {
  id          String     @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime   @default(now())

  categoryId  String
  category    Category   @relation(fields: [categoryId], references: [id])

  products    Product[]  // Products in this subcategory
}


model Product {
  id           String      @id @default(cuid())
  name         String
  title        String?
  description  String?
  brand        String?
  dimensions   String?
  weight       String?
  manufacture  String?
  price        Float
  stock        Int         @default(0)
  addInfo      String?
  material     String?
  images       ProductImage[]
  createdAt    DateTime    @default(now())

  categoryId   String?
  category     Category?   @relation(fields: [categoryId], references: [id])

  subCategoryId String?    // NEW
  subCategory   SubCategory? @relation(fields: [subCategoryId], references: [id])

  orderItems    OrderItem[]
  reviews       Review[]
  cartItems     CartItem[]
  wishlistItems WishlistItem[]
}


model ProductImage {
  id        String   @id @default(cuid())
  url       String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
}

model Order {
  id              String           @id @default(cuid())
  totalAmount     Float
  status          OrderStatus   @default(pending)
  shippingId      String?
  trackingId      String?
  paymentStatus   PaymentStatus @default(pending)
  createdAt       DateTime      @default(now())

  userId String
  user   User @relation(fields: [userId], references: [id])

  orderItems OrderItem[]
  payment    Payment?
}

enum OrderStatus {
  pending
  shipped
  delivered
  canceled
}

enum PaymentStatus {
  pending
  completed
  failed
}

model OrderItem {
  id       String           @id @default(cuid())
  quantity Int
  price    Float

  orderId String
  order   Order @relation(fields: [orderId], references: [id])

  productId String
  product   Product @relation(fields: [productId], references: [id])
}

model Payment {
  id            Int           @id @default(autoincrement())
  paymentMethod PaymentMethod
  paymentStatus PaymentStatus @default(pending)
  paymentAmount Float
  transactionId String?
  paymentDate   DateTime      @default(now())

  orderId String   @unique
  order   Order @relation(fields: [orderId], references: [id])
}

enum PaymentMethod {
  credit_card
  paypal
  bank_transfer
  cash_on_delivery
}

model Review {
  id        Int      @id @default(autoincrement())
  rating    Int      @default(1) @map("rating") // Check for range constraint
  comment   String?
  createdAt DateTime @default(now())

  userId String
  user   User @relation(fields: [userId], references: [id])

  productId String
  product   Product @relation(fields: [productId], references: [id])
}

model Cart {
  id        String      @id @default(cuid())
  createdAt DateTime @default(now())

  userId String  @unique
  user   User @relation(fields: [userId], references: [id])

  cartItems CartItem[]
}

model CartItem {
  id       String @id @default(cuid())
  quantity Int @default(1)

  cartId String
  cart   Cart @relation(fields: [cartId], references: [id])

  productId String
  product   Product @relation(fields: [productId], references: [id])
}

model Shipping {
  id              String   @id @default(cuid())
  fullName        String
  mobileNumber    String
  pincode         String
  houseNo         String
  area            String
  city            String
  state           String
  // NEW RELATION TO USER
  userId String
  user   User @relation(fields: [userId], references: [id])

}



model Wishlist {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  userId String  @unique
  user   User @relation(fields: [userId], references: [id])

  wishlistItems WishlistItem[]
}

model WishlistItem {
  id Int @id @default(autoincrement())

  wishlistId Int
  wishlist   Wishlist @relation(fields: [wishlistId], references: [id])

  productId String
  product   Product @relation(fields: [productId], references: [id])
}


model PrintJob {
  id           String   @id @default(cuid())
  fileUrl      String
  units        String
  rotationX    Float
  rotationY    Float
  rotationZ    Float
  printerQuality String
  material     String
  infill       Int
  quantity     Int
  notes        String?
  name         String
  phone        String
  email        String
  address      String
  createdAt    DateTime @default(now())
}
